# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ActivityParticipantDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activity_id=None, first_name=None, id=None, last_name=None, participant_role=None, profile_image_url=None, user_id=None):
        """
        ActivityParticipantDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activity_id': 'int',
            'first_name': 'str',
            'id': 'int',
            'last_name': 'str',
            'participant_role': 'str',
            'profile_image_url': 'str',
            'user_id': 'int'
        }

        self.attribute_map = {
            'activity_id': 'activityId',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'participant_role': 'participantRole',
            'profile_image_url': 'profileImageUrl',
            'user_id': 'userId'
        }

        self._activity_id = activity_id
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._participant_role = participant_role
        self._profile_image_url = profile_image_url
        self._user_id = user_id


    @property
    def activity_id(self):
        """
        Gets the activity_id of this ActivityParticipantDTO.


        :return: The activity_id of this ActivityParticipantDTO.
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """
        Sets the activity_id of this ActivityParticipantDTO.


        :param activity_id: The activity_id of this ActivityParticipantDTO.
        :type: int
        """

        self._activity_id = activity_id

    @property
    def first_name(self):
        """
        Gets the first_name of this ActivityParticipantDTO.


        :return: The first_name of this ActivityParticipantDTO.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this ActivityParticipantDTO.


        :param first_name: The first_name of this ActivityParticipantDTO.
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """
        Gets the id of this ActivityParticipantDTO.


        :return: The id of this ActivityParticipantDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ActivityParticipantDTO.


        :param id: The id of this ActivityParticipantDTO.
        :type: int
        """

        self._id = id

    @property
    def last_name(self):
        """
        Gets the last_name of this ActivityParticipantDTO.


        :return: The last_name of this ActivityParticipantDTO.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this ActivityParticipantDTO.


        :param last_name: The last_name of this ActivityParticipantDTO.
        :type: str
        """

        self._last_name = last_name

    @property
    def participant_role(self):
        """
        Gets the participant_role of this ActivityParticipantDTO.


        :return: The participant_role of this ActivityParticipantDTO.
        :rtype: str
        """
        return self._participant_role

    @participant_role.setter
    def participant_role(self, participant_role):
        """
        Sets the participant_role of this ActivityParticipantDTO.


        :param participant_role: The participant_role of this ActivityParticipantDTO.
        :type: str
        """
        allowed_values = ["buyer", "owner", "facilitator", "processor", "transportation", "expert"]
        if participant_role not in allowed_values:
            raise ValueError(
                "Invalid value for `participant_role` ({0}), must be one of {1}"
                .format(participant_role, allowed_values)
            )

        self._participant_role = participant_role

    @property
    def profile_image_url(self):
        """
        Gets the profile_image_url of this ActivityParticipantDTO.


        :return: The profile_image_url of this ActivityParticipantDTO.
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """
        Sets the profile_image_url of this ActivityParticipantDTO.


        :param profile_image_url: The profile_image_url of this ActivityParticipantDTO.
        :type: str
        """

        self._profile_image_url = profile_image_url

    @property
    def user_id(self):
        """
        Gets the user_id of this ActivityParticipantDTO.


        :return: The user_id of this ActivityParticipantDTO.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ActivityParticipantDTO.


        :param user_id: The user_id of this ActivityParticipantDTO.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
