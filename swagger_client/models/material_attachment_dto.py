# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MaterialAttachmentDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, attachment_type=None, file_name=None, file_url=None, id=None, material_id=None):
        """
        MaterialAttachmentDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'attachment_type': 'str',
            'file_name': 'str',
            'file_url': 'str',
            'id': 'int',
            'material_id': 'int'
        }

        self.attribute_map = {
            'attachment_type': 'attachmentType',
            'file_name': 'fileName',
            'file_url': 'fileUrl',
            'id': 'id',
            'material_id': 'materialId'
        }

        self._attachment_type = attachment_type
        self._file_name = file_name
        self._file_url = file_url
        self._id = id
        self._material_id = material_id


    @property
    def attachment_type(self):
        """
        Gets the attachment_type of this MaterialAttachmentDTO.


        :return: The attachment_type of this MaterialAttachmentDTO.
        :rtype: str
        """
        return self._attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):
        """
        Sets the attachment_type of this MaterialAttachmentDTO.


        :param attachment_type: The attachment_type of this MaterialAttachmentDTO.
        :type: str
        """
        allowed_values = ["MSDS", "Image", "File"]
        if attachment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `attachment_type` ({0}), must be one of {1}"
                .format(attachment_type, allowed_values)
            )

        self._attachment_type = attachment_type

    @property
    def file_name(self):
        """
        Gets the file_name of this MaterialAttachmentDTO.


        :return: The file_name of this MaterialAttachmentDTO.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this MaterialAttachmentDTO.


        :param file_name: The file_name of this MaterialAttachmentDTO.
        :type: str
        """

        self._file_name = file_name

    @property
    def file_url(self):
        """
        Gets the file_url of this MaterialAttachmentDTO.


        :return: The file_url of this MaterialAttachmentDTO.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """
        Sets the file_url of this MaterialAttachmentDTO.


        :param file_url: The file_url of this MaterialAttachmentDTO.
        :type: str
        """

        self._file_url = file_url

    @property
    def id(self):
        """
        Gets the id of this MaterialAttachmentDTO.


        :return: The id of this MaterialAttachmentDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MaterialAttachmentDTO.


        :param id: The id of this MaterialAttachmentDTO.
        :type: int
        """

        self._id = id

    @property
    def material_id(self):
        """
        Gets the material_id of this MaterialAttachmentDTO.


        :return: The material_id of this MaterialAttachmentDTO.
        :rtype: int
        """
        return self._material_id

    @material_id.setter
    def material_id(self, material_id):
        """
        Sets the material_id of this MaterialAttachmentDTO.


        :param material_id: The material_id of this MaterialAttachmentDTO.
        :type: int
        """

        self._material_id = material_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
