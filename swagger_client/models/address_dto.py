# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AddressDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, building=None, city=None, country=None, id=None, location_id=None, state=None, street=None, zip=None):
        """
        AddressDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'building': 'str',
            'city': 'str',
            'country': 'str',
            'id': 'int',
            'location_id': 'int',
            'state': 'str',
            'street': 'str',
            'zip': 'str'
        }

        self.attribute_map = {
            'building': 'building',
            'city': 'city',
            'country': 'country',
            'id': 'id',
            'location_id': 'locationId',
            'state': 'state',
            'street': 'street',
            'zip': 'zip'
        }

        self._building = building
        self._city = city
        self._country = country
        self._id = id
        self._location_id = location_id
        self._state = state
        self._street = street
        self._zip = zip


    @property
    def building(self):
        """
        Gets the building of this AddressDTO.


        :return: The building of this AddressDTO.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building):
        """
        Sets the building of this AddressDTO.


        :param building: The building of this AddressDTO.
        :type: str
        """

        self._building = building

    @property
    def city(self):
        """
        Gets the city of this AddressDTO.


        :return: The city of this AddressDTO.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this AddressDTO.


        :param city: The city of this AddressDTO.
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """
        Gets the country of this AddressDTO.


        :return: The country of this AddressDTO.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this AddressDTO.


        :param country: The country of this AddressDTO.
        :type: str
        """

        self._country = country

    @property
    def id(self):
        """
        Gets the id of this AddressDTO.


        :return: The id of this AddressDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AddressDTO.


        :param id: The id of this AddressDTO.
        :type: int
        """

        self._id = id

    @property
    def location_id(self):
        """
        Gets the location_id of this AddressDTO.


        :return: The location_id of this AddressDTO.
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """
        Sets the location_id of this AddressDTO.


        :param location_id: The location_id of this AddressDTO.
        :type: int
        """

        self._location_id = location_id

    @property
    def state(self):
        """
        Gets the state of this AddressDTO.


        :return: The state of this AddressDTO.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this AddressDTO.


        :param state: The state of this AddressDTO.
        :type: str
        """

        self._state = state

    @property
    def street(self):
        """
        Gets the street of this AddressDTO.


        :return: The street of this AddressDTO.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this AddressDTO.


        :param street: The street of this AddressDTO.
        :type: str
        """

        self._street = street

    @property
    def zip(self):
        """
        Gets the zip of this AddressDTO.


        :return: The zip of this AddressDTO.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this AddressDTO.


        :param zip: The zip of this AddressDTO.
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
