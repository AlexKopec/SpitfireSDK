# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Payment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, amount=None, currency=None, date=None, id=None, invoice_id=None, status=None, subscription=None):
        """
        Payment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'amount': 'float',
            'currency': 'str',
            'date': 'datetime',
            'id': 'int',
            'invoice_id': 'str',
            'status': 'str',
            'subscription': 'Subscription'
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'date': 'date',
            'id': 'id',
            'invoice_id': 'invoiceId',
            'status': 'status',
            'subscription': 'subscription'
        }

        self._amount = amount
        self._currency = currency
        self._date = date
        self._id = id
        self._invoice_id = invoice_id
        self._status = status
        self._subscription = subscription


    @property
    def amount(self):
        """
        Gets the amount of this Payment.


        :return: The amount of this Payment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Payment.


        :param amount: The amount of this Payment.
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """
        Gets the currency of this Payment.


        :return: The currency of this Payment.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Payment.


        :param currency: The currency of this Payment.
        :type: str
        """
        allowed_values = ["USD", "EUR"]
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def date(self):
        """
        Gets the date of this Payment.


        :return: The date of this Payment.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this Payment.


        :param date: The date of this Payment.
        :type: datetime
        """

        self._date = date

    @property
    def id(self):
        """
        Gets the id of this Payment.


        :return: The id of this Payment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Payment.


        :param id: The id of this Payment.
        :type: int
        """

        self._id = id

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this Payment.


        :return: The invoice_id of this Payment.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this Payment.


        :param invoice_id: The invoice_id of this Payment.
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def status(self):
        """
        Gets the status of this Payment.


        :return: The status of this Payment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Payment.


        :param status: The status of this Payment.
        :type: str
        """

        self._status = status

    @property
    def subscription(self):
        """
        Gets the subscription of this Payment.


        :return: The subscription of this Payment.
        :rtype: Subscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """
        Sets the subscription of this Payment.


        :param subscription: The subscription of this Payment.
        :type: Subscription
        """

        self._subscription = subscription

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
