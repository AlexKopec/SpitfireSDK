# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ActivityDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activity_type=None, cancel_reason=None, id=None, last_update=None, material_id=None, messages=None, participants=None, quantity=None, user_id=None):
        """
        ActivityDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activity_type': 'str',
            'cancel_reason': 'str',
            'id': 'int',
            'last_update': 'datetime',
            'material_id': 'int',
            'messages': 'list[ActivityMessageDTO]',
            'participants': 'list[ActivityParticipantDTO]',
            'quantity': 'int',
            'user_id': 'int'
        }

        self.attribute_map = {
            'activity_type': 'activityType',
            'cancel_reason': 'cancelReason',
            'id': 'id',
            'last_update': 'lastUpdate',
            'material_id': 'materialId',
            'messages': 'messages',
            'participants': 'participants',
            'quantity': 'quantity',
            'user_id': 'userId'
        }

        self._activity_type = activity_type
        self._cancel_reason = cancel_reason
        self._id = id
        self._last_update = last_update
        self._material_id = material_id
        self._messages = messages
        self._participants = participants
        self._quantity = quantity
        self._user_id = user_id


    @property
    def activity_type(self):
        """
        Gets the activity_type of this ActivityDTO.


        :return: The activity_type of this ActivityDTO.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """
        Sets the activity_type of this ActivityDTO.


        :param activity_type: The activity_type of this ActivityDTO.
        :type: str
        """
        allowed_values = ["OngoingTransaction", "NewRequest", "Recommendation", "CompletedTransaction", "CancelledTransaction"]
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def cancel_reason(self):
        """
        Gets the cancel_reason of this ActivityDTO.


        :return: The cancel_reason of this ActivityDTO.
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """
        Sets the cancel_reason of this ActivityDTO.


        :param cancel_reason: The cancel_reason of this ActivityDTO.
        :type: str
        """

        self._cancel_reason = cancel_reason

    @property
    def id(self):
        """
        Gets the id of this ActivityDTO.


        :return: The id of this ActivityDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ActivityDTO.


        :param id: The id of this ActivityDTO.
        :type: int
        """

        self._id = id

    @property
    def last_update(self):
        """
        Gets the last_update of this ActivityDTO.


        :return: The last_update of this ActivityDTO.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """
        Sets the last_update of this ActivityDTO.


        :param last_update: The last_update of this ActivityDTO.
        :type: datetime
        """

        self._last_update = last_update

    @property
    def material_id(self):
        """
        Gets the material_id of this ActivityDTO.


        :return: The material_id of this ActivityDTO.
        :rtype: int
        """
        return self._material_id

    @material_id.setter
    def material_id(self, material_id):
        """
        Sets the material_id of this ActivityDTO.


        :param material_id: The material_id of this ActivityDTO.
        :type: int
        """

        self._material_id = material_id

    @property
    def messages(self):
        """
        Gets the messages of this ActivityDTO.


        :return: The messages of this ActivityDTO.
        :rtype: list[ActivityMessageDTO]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this ActivityDTO.


        :param messages: The messages of this ActivityDTO.
        :type: list[ActivityMessageDTO]
        """

        self._messages = messages

    @property
    def participants(self):
        """
        Gets the participants of this ActivityDTO.


        :return: The participants of this ActivityDTO.
        :rtype: list[ActivityParticipantDTO]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """
        Sets the participants of this ActivityDTO.


        :param participants: The participants of this ActivityDTO.
        :type: list[ActivityParticipantDTO]
        """

        self._participants = participants

    @property
    def quantity(self):
        """
        Gets the quantity of this ActivityDTO.


        :return: The quantity of this ActivityDTO.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this ActivityDTO.


        :param quantity: The quantity of this ActivityDTO.
        :type: int
        """

        self._quantity = quantity

    @property
    def user_id(self):
        """
        Gets the user_id of this ActivityDTO.


        :return: The user_id of this ActivityDTO.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ActivityDTO.


        :param user_id: The user_id of this ActivityDTO.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
