# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MarketplaceUserDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address_id=None, company_id=None, contact_info_id=None, first_name=None, id=None, last_name=None, user_status=None):
        """
        MarketplaceUserDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address_id': 'int',
            'company_id': 'int',
            'contact_info_id': 'int',
            'first_name': 'str',
            'id': 'int',
            'last_name': 'str',
            'user_status': 'str'
        }

        self.attribute_map = {
            'address_id': 'addressId',
            'company_id': 'companyId',
            'contact_info_id': 'contactInfoId',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'user_status': 'userStatus'
        }

        self._address_id = address_id
        self._company_id = company_id
        self._contact_info_id = contact_info_id
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._user_status = user_status


    @property
    def address_id(self):
        """
        Gets the address_id of this MarketplaceUserDTO.


        :return: The address_id of this MarketplaceUserDTO.
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """
        Sets the address_id of this MarketplaceUserDTO.


        :param address_id: The address_id of this MarketplaceUserDTO.
        :type: int
        """

        self._address_id = address_id

    @property
    def company_id(self):
        """
        Gets the company_id of this MarketplaceUserDTO.


        :return: The company_id of this MarketplaceUserDTO.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this MarketplaceUserDTO.


        :param company_id: The company_id of this MarketplaceUserDTO.
        :type: int
        """

        self._company_id = company_id

    @property
    def contact_info_id(self):
        """
        Gets the contact_info_id of this MarketplaceUserDTO.


        :return: The contact_info_id of this MarketplaceUserDTO.
        :rtype: int
        """
        return self._contact_info_id

    @contact_info_id.setter
    def contact_info_id(self, contact_info_id):
        """
        Sets the contact_info_id of this MarketplaceUserDTO.


        :param contact_info_id: The contact_info_id of this MarketplaceUserDTO.
        :type: int
        """

        self._contact_info_id = contact_info_id

    @property
    def first_name(self):
        """
        Gets the first_name of this MarketplaceUserDTO.


        :return: The first_name of this MarketplaceUserDTO.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this MarketplaceUserDTO.


        :param first_name: The first_name of this MarketplaceUserDTO.
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """
        Gets the id of this MarketplaceUserDTO.


        :return: The id of this MarketplaceUserDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MarketplaceUserDTO.


        :param id: The id of this MarketplaceUserDTO.
        :type: int
        """

        self._id = id

    @property
    def last_name(self):
        """
        Gets the last_name of this MarketplaceUserDTO.


        :return: The last_name of this MarketplaceUserDTO.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this MarketplaceUserDTO.


        :param last_name: The last_name of this MarketplaceUserDTO.
        :type: str
        """

        self._last_name = last_name

    @property
    def user_status(self):
        """
        Gets the user_status of this MarketplaceUserDTO.


        :return: The user_status of this MarketplaceUserDTO.
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """
        Sets the user_status of this MarketplaceUserDTO.


        :param user_status: The user_status of this MarketplaceUserDTO.
        :type: str
        """
        allowed_values = ["INACTIVE", "PAUSED", "ACTIVE"]
        if user_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_status` ({0}), must be one of {1}"
                .format(user_status, allowed_values)
            )

        self._user_status = user_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
