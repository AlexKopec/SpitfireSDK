# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CompanyDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address_id=None, description=None, id=None, industry_id=None, name=None, users=None):
        """
        CompanyDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address_id': 'int',
            'description': 'str',
            'id': 'int',
            'industry_id': 'int',
            'name': 'str',
            'users': 'list[User]'
        }

        self.attribute_map = {
            'address_id': 'addressId',
            'description': 'description',
            'id': 'id',
            'industry_id': 'industryId',
            'name': 'name',
            'users': 'users'
        }

        self._address_id = address_id
        self._description = description
        self._id = id
        self._industry_id = industry_id
        self._name = name
        self._users = users


    @property
    def address_id(self):
        """
        Gets the address_id of this CompanyDTO.


        :return: The address_id of this CompanyDTO.
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """
        Sets the address_id of this CompanyDTO.


        :param address_id: The address_id of this CompanyDTO.
        :type: int
        """

        self._address_id = address_id

    @property
    def description(self):
        """
        Gets the description of this CompanyDTO.


        :return: The description of this CompanyDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CompanyDTO.


        :param description: The description of this CompanyDTO.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this CompanyDTO.


        :return: The id of this CompanyDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CompanyDTO.


        :param id: The id of this CompanyDTO.
        :type: int
        """

        self._id = id

    @property
    def industry_id(self):
        """
        Gets the industry_id of this CompanyDTO.


        :return: The industry_id of this CompanyDTO.
        :rtype: int
        """
        return self._industry_id

    @industry_id.setter
    def industry_id(self, industry_id):
        """
        Sets the industry_id of this CompanyDTO.


        :param industry_id: The industry_id of this CompanyDTO.
        :type: int
        """

        self._industry_id = industry_id

    @property
    def name(self):
        """
        Gets the name of this CompanyDTO.


        :return: The name of this CompanyDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CompanyDTO.


        :param name: The name of this CompanyDTO.
        :type: str
        """

        self._name = name

    @property
    def users(self):
        """
        Gets the users of this CompanyDTO.


        :return: The users of this CompanyDTO.
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this CompanyDTO.


        :param users: The users of this CompanyDTO.
        :type: list[User]
        """

        self._users = users

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
