# coding: utf-8

"""
    spitfire API

    spitfire API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MarketplaceServiceDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, company_id=None, id=None, name=None, service_type=None):
        """
        MarketplaceServiceDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'company_id': 'int',
            'id': 'int',
            'name': 'str',
            'service_type': 'str'
        }

        self.attribute_map = {
            'company_id': 'companyId',
            'id': 'id',
            'name': 'name',
            'service_type': 'serviceType'
        }

        self._company_id = company_id
        self._id = id
        self._name = name
        self._service_type = service_type


    @property
    def company_id(self):
        """
        Gets the company_id of this MarketplaceServiceDTO.


        :return: The company_id of this MarketplaceServiceDTO.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this MarketplaceServiceDTO.


        :param company_id: The company_id of this MarketplaceServiceDTO.
        :type: int
        """

        self._company_id = company_id

    @property
    def id(self):
        """
        Gets the id of this MarketplaceServiceDTO.


        :return: The id of this MarketplaceServiceDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MarketplaceServiceDTO.


        :param id: The id of this MarketplaceServiceDTO.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this MarketplaceServiceDTO.


        :return: The name of this MarketplaceServiceDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MarketplaceServiceDTO.


        :param name: The name of this MarketplaceServiceDTO.
        :type: str
        """

        self._name = name

    @property
    def service_type(self):
        """
        Gets the service_type of this MarketplaceServiceDTO.


        :return: The service_type of this MarketplaceServiceDTO.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """
        Sets the service_type of this MarketplaceServiceDTO.


        :param service_type: The service_type of this MarketplaceServiceDTO.
        :type: str
        """
        allowed_values = ["SELLING", "BUYING", "TRANSPORTATION", "WASTERECOVERY", "LEGALSUPORT", "ENSURANCE", "SECURITY", "ETC"]
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
